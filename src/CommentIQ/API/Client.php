<?php

/*
 * This file is part of the WordPress Comment IQ plugin.
 *
 * (c) Carl Alexander <contact@carlalexander.ca>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * The comment IQ API Client.
 *
 * @author Carl Alexander <contact@carlalexander.ca>
 */
class CommentIQ_API_Client
{
    /**
     * Base URL for all Comment IQ API endpoints.
     *
     * @var string
     */
    const ENDPOINT_BASE = 'http://api.comment-iq.com/commentIQ/v1';

    /**
     * The WordPress HTTP transport.
     *
     * @var WP_Http
     */
    private $http_transport;

    /**
     * Constructor.
     *
     * @param WP_Http $http_transport
     */
    public function __construct(WP_Http $http_transport)
    {
        $this->http_transport = $http_transport;
    }

    /**
     * Add a new article for Comment IQ to track. Returns the auto-generated ID
     * of the article.
     *
     * @param string $article_text
     *
     * @return int|WP_Error
     */
    public function add_article($article_text)
    {
        $response = $this->post(self::ENDPOINT_BASE.'/addArticle', array(
            'article_text' => $article_text,
        ));

        if ($response instanceof WP_Error) {
            return $response;
        } elseif (!isset($response['articleID']) || empty($response['articleID'])) {
            return new WP_Error('commentiq_error', sprintf("Comment IQ API didn't return an article ID. [Message: %s]", $response['status']));
        } elseif (!is_numeric($response['articleID'])) {
            return new WP_Error('commentiq_error', "Comment IQ API didn't return a valid article ID.");
        }

        return $response['articleID'];
    }

    /**
     * Add a new comment to the article with the given article ID. Returns the comment details
     * generated by the Comment IQ API.
     *
     * @param int    $article_id
     * @param string $comment_body
     * @param string $comment_date
     * @param string $username
     *
     * @return array|WP_Error
     */
    public function add_comment($article_id, $comment_body, $comment_date = '', $username = '')
    {
        $parameters = array(
            'articleID' => $article_id,
            'commentBody' => $comment_body,
        );

        if (empty($comment_date)) {
            $parameters['commentDate'] = $comment_date;
        }

        if (!empty($username)) {
            $parameters['username'] = $username;
        }

        $response = $this->post(self::ENDPOINT_BASE.'/addComment', $parameters);

        if ($response instanceof WP_Error) {
            return $response;
        } elseif (!isset($response['commentID']) || empty($response['commentID'])) {
            return new WP_Error('commentiq_error', sprintf("Comment IQ API didn't return an CommentID. [Message: %s]", $response['status']));
        } elseif (!is_numeric($response['commentID'])) {
            return new WP_Error('commentiq_error', "Comment IQ API didn't return a valid CommentID");
        }

        unset($response['status']);

        return $response;
    }

    /**
     * Update an existing article with Comment IQ API.
     *
     * @param int    $article_id
     * @param string $article_text
     */
    public function update_article($article_id, $article_text)
    {
        $this->post(self::ENDPOINT_BASE.'/updateArticle', array(
            'articleID' => $article_id,
            'article_text' => $article_text
        ));
    }

    /**
     * Update an existing comment with Comment IQ API. Returns the comment details
     * generated by the Comment IQ API.
     *
     * @param int    $comment_id
     * @param string $comment_body
     * @param string $comment_date
     * @param string $username
     *
     * @return array|WP_Error
     */
    public function update_comment($comment_id, $comment_body, $comment_date = '', $username = '')
    {
        $parameters = array(
            'commentID' => $comment_id,
            'commentBody' => $comment_body,
        );

        if (empty($comment_date)) {
            $parameters['commentDate'] = $comment_date;
        }

        if (!empty($username)) {
            $parameters['username'] = $username;
        }

        $response = $this->post(self::ENDPOINT_BASE.'/updateComment', $parameters);

        unset($response['status']);

        return $response;
    }

    /**
     * Build an URL with given url and query parameters.
     *
     * @param string $url
     * @param array  $query
     *
     * @return string
     */
    private function build_url($url, array $query = array())
    {
        return $url.'?'.http_build_query($query);
    }

    /**
     * Decodes the API response.
     *
     * @param mixed $response
     *
     * @return array|WP_Error
     */
    private function decode_response($response)
    {
        $response = $this->validate_response($response);

        if ($response instanceof WP_Error) {
            return $response;
        }

        return $this->validate_body(json_decode($response['body'], true));
    }

    /**
     * Performs a GET request using the WordPress HTTP transport.
     *
     * @param string $url
     * @param array  $query
     * @param array  $args
     *
     * @return array|WP_Error
     */
    private function get($url, array $query = array(), array $args = array())
    {
        $args = array_merge_recursive($args, $this->get_default_args());

        return $this->decode_response($this->http_transport->get($this->build_url($url, $query), $args));
    }

    /**
     * Get the default arguments for all client requests.
     *
     * @return array
     */
    private function get_default_args()
    {
        $args = array(
            'headers' => array(
                'Content-Type' => 'application/json',
            ),
        );

        return $args;
    }

    /**
     * Extracts the status code from the given response.
     *
     * @param array $response The response array with a response code
     *
     * @return int|null
     */
    private function get_response_status_code(array $response)
    {
        if (!isset($response['response']) || !is_array($response['response']) || !isset($response['response']['code'])) {
            return;
        }

        return (int) $response['response']['code'];
    }

    /**
     * Checks if the given response is considered successful as per the HTTP specification.
     * This means that the response has a 2xx status code.
     *
     * @param array $response The response being validated
     *
     * @return bool
     */
    private function is_successful(array $response)
    {
        $status_code = $this->get_response_status_code($response);

        if (null === $status_code) {
            return false;
        }

        return $status_code >= 200 && $status_code < 300;
    }

    /**
     * Performs a POST request to Comment IQ API using the WordPress HTTP transport.
     *
     * @param string $url
     * @param array  $parameters
     * @param array  $args
     *
     * @return array|WP_Error
     */
    private function post($url, $parameters, array $args = array())
    {
        $args = array_merge_recursive($args, $this->get_default_args());
        $args['body'] = json_encode($parameters);

        return $this->decode_response($this->http_transport->post($url, $args));
    }

    /**
     * Validates the client response body. Returns a WP_Error if an error is found.
     *
     * @param mixed $body
     *
     * @return array|WP_Error
     */
    private function validate_body($body)
    {
        if (!is_array($body)) {
            return new WP_Error('invalid_json', 'There was an error decoding the response.');
        }

        return $body;
    }

    /**
     * Validates the client response. Returns a WP_Error if an error is found.
     *
     * @param mixed $response
     *
     * @return array|WP_Error
     */
    private function validate_response($response)
    {
        if ($response instanceof WP_Error) {
            return $response;
        } elseif (!is_array($response)) {
            return new WP_Error('invalid_response', 'Response must be an array.');
        } elseif (empty($response['body'])) {
            return new WP_Error('invalid_response', 'No body found in the response.');
        }

        return $response;
    }
}
